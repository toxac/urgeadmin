create table public.user_opportunity_segments (
  id uuid not null default gen_random_uuid (),
  opportunity_id uuid not null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone null default now(),
  user_id uuid null,
  segment_name text not null,
  segment_description text not null,
  age_range_start integer null,
  age_range_end integer null,
  gender_focus text[] null,
  income_level text null,
  education_level text[] null,
  occupation_types text[] null,
  family_status text null,
  geographic_focus text null,
  psychographic_traits text[] null,
  specific_needs text[] not null,
  specific_pains text[] not null,
  evidence_type text not null,
  evidence_details text not null,
  evidence_date date null,
  people_researched integer null,
  estimated_segment_size integer null,
  accessibility_score smallint null,
  willingness_to_pay text null,
  budget_range text null,
  purchase_frequency text null,
  validation_status text not null default 'identified'::text,
  next_validation_steps text null,
  outreach_plan text null,
  constraint user_opportunity_segments_opportunity_id_fkey foreign KEY (opportunity_id) references user_opportunities (id) on delete CASCADE,
  constraint user_opportunity_segments_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE,
  constraint user_opportunity_segments_age_range_end_check check ((age_range_end >= 0)),
  constraint user_opportunity_segments_age_range_start_check check ((age_range_start >= 0))
) TABLESPACE pg_default;